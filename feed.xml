<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://hydroaggie.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://hydroaggie.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-09-27T15:58:34+00:00</updated><id>https://hydroaggie.github.io/feed.xml</id><title type="html">Computational and Integrated Hydrology Group</title><subtitle>The CIHG research group at USU. </subtitle><entry><title type="html">A Zotero to Obsidian Workflow</title><link href="https://hydroaggie.github.io/blog/2023/A-Zotero-to-Obsidian-Workflow/" rel="alternate" type="text/html" title="A Zotero to Obsidian Workflow"/><published>2023-09-26T00:00:00+00:00</published><updated>2023-09-26T00:00:00+00:00</updated><id>https://hydroaggie.github.io/blog/2023/A-Zotero-to-Obsidian-Workflow</id><content type="html" xml:base="https://hydroaggie.github.io/blog/2023/A-Zotero-to-Obsidian-Workflow/"><![CDATA[<p>This tutorial combines the contents from <a href="https://forum.obsidian.md/t/zotero-zotfile-mdnotes-obsidian-dataview-workflow/15536">this</a> and <a href="https://medium.com/@alexandraphelan/an-updated-academic-workflow-zotero-obsidian-cffef080addd">this</a> blog with customization.</p> <h2 id="pre-requisites">Pre-requisites:</h2> <ul> <li>Zotero (v6.0.27)</li> <li>Obsidian (v1.4.13)</li> <li>Obsidian plugins: Zotero Integration, Templater, Dataview</li> <li>Optional Zotero plugins: Zotfile, Better BibTex (used to create citation key)</li> </ul> <h2 id="setup">Setup</h2> <h3 id="create-a-template-for-zotero-integration">Create a template for Zotero Integration</h3> <p>To add a template, go to …</p> <p>I started with the template provided in <a href="https://medium.com/@alexandraphelan/an-updated-academic-workflow-zotero-obsidian-cffef080addd">this</a> post. I like the different callouts used for citation, abstract, and etc. However, I don’t like the look of the annotations and the images are not embeded in the notes.</p> <p>I came across <a href="https://forum.obsidian.md/t/zotero-integration-import-templates/36310">this post</a> in the Obsidian Forum, which color-codes the highlights and provides image embeding in the annotation. There is one little problem with the color style in the CSS snippet. The colors do not match the ones used in Zotero (see <code class="language-plaintext highlighter-rouge">Variables</code> in <a href="https://www.zotero.org/support/note_templates">ref</a>). I have updated the CSS snippet and provided below.</p> <p>In the end, I combined those two templates and came up with <a href="">this customized one</a> that I really like.</p> <p>Here is the color code for highlights:</p> <table> <thead> <tr> <th style="text-align: left">Color</th> <th style="text-align: center">Meaning</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><span style="color:yellow;"> yellow</span></td> <td style="text-align: center"><span style="color:yellow;"> Relavent/important. The default color.</span></td> </tr> <tr> <td style="text-align: left"><span style="color:green;"> green </span></td> <td style="text-align: center"><span style="color:green;"> Follow up and read the cited papers. </span></td> </tr> <tr> <td style="text-align: left"><span style="color:red;"> red </span></td> <td style="text-align: center"><span style="color:red;"> Disagree with the author. </span></td> </tr> <tr> <td style="text-align: left"><span style="color:magenta;"> magenta </span></td> <td style="text-align: center"><span style="color:magenta;"> The author critiques previous work or points out knowledge gaps. </span></td> </tr> <tr> <td style="text-align: left"><span style="color:orange;"> orange </span></td> <td style="text-align: center"><span style="color:orange;"> Questions/confusion about the statement </span></td> </tr> </tbody> </table> <p>I will breakdown into different sections:</p> <ul> <li>Cite:</li> <li>Synthesis:</li> <li>Link:</li> <li>Abstract:</li> <li>Annotations: The page link will take you back to the PDF reader in Zotero.**</li> <li>Metadata</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
---
cssclass: literature-note
category: literaturenote
title: {{title}}
tags: {% if allTags %}{{allTags}}{% endif %}
citekey: {{citekey}}
status: unread
dateread:
---

&gt; [!Cite]
&gt; {{bibliography}}

&gt;[!Synthesis]
&gt;**Contribution**:: 
&gt;
&gt;**Related**:: {% for relation in relations | selectattr("citekey") %} [[@{{relation.citekey}}]]{% if not loop.last %}, {% endif%} {% endfor %}
&gt;

&gt; [!Link] 
&gt; {%- for attachment in attachments | filterby("path", "endswith", ".pdf") %}
&gt;  [{{attachment.title}}](file://{{attachment.path | replace(" ", "%20")}})  {%- endfor -%}.

&gt; [!Abstract]-
&gt; {%- if abstractNote %}
&gt; {{abstractNote}}
&gt; {%- endif -%}.


## Annotations

{%- macro colorValueToName(color) -%}
	{%- switch color -%}
		{%- case "#ffd400" -%}
			Relevant / important
		{%- case "#ff6666" -%}
			Disagree
		{%- case "#e56eee" -%}
			Critiques
		{%- case "#a28ae5" -%}
			Questions / confusion
		{%- case "#5fb236" -%}
			TODO / follow up
		{%- default -%}
			Note
	{%- endswitch -%}
{%- endmacro -%}

{%- macro calloutHeader(type) -%}
	{%- switch type -%}
		{%- case "highlight" -%}
			Highlight
		{%- case "strike" -%}
			Strikethrough
		{%- case "underline" -%}
			Underline
		{%- case "image" -%}
			Image
		{%- default -%}
			Note
	{%- endswitch -%}
{%- endmacro %}

{% persist "annotations" %}
{% set annots = annotations | filterby("date", "dateafter", lastImportDate) -%}
{% if annots.length &gt; 0 %}
### Imported on {{importDate | format("YYYY-MM-DD h:mm a")}}

{% for color, annots in annots | groupby("color") -%}
#### {{colorValueToName(color)}}

{% for annot in annots -%}
&gt; [!quote{% if annot.color %}|{{annot.color}}{% endif %}] {{calloutHeader(annot.type)}}
{%- if annot.annotatedText %}
&gt; {{annot.annotatedText | nl2br}}
{%- endif -%}
{%- if annot.imageRelativePath %}
&gt; ![[{{annot.imageRelativePath}}]]
{%- endif %}
{%- if annot.ocrText %}
&gt; {{annot.ocrText}}
{%- endif %}
{%- if annot.comment %}
&gt;
&gt;&gt; {{annot.comment | nl2br}}
{%- endif %}
&gt;
&gt; [Page {{annot.page}}](zotero://open-pdf/library/items/{{annot.attachment.itemKey}}?page={{annot.page}}) [{{annot.date | format("YYYY-MM-DD#h:mm a")}}]

{% endfor -%}
{% endfor -%}
{% endif %}
{% endpersist %}

&gt;[!metadata]-
{% for type, creators in creators | groupby("creatorType") -%}
{%- for creator in creators -%}
&gt; **{{"First" if loop.first}}{{type | capitalize}}**::
{%- if creator.name %} {{creator.name}}  
{%- else %} {{creator.lastName}}, {{creator.firstName}}  
{%- endif %}  
{% endfor %}~ 
{%- endfor %}    
&gt; **Title**:: {{title}}  
&gt; **Year**:: {{date | format("YYYY")}}   
&gt; **Citekey**:: {{citekey}} {%- if itemType %}  
&gt; **itemType**:: {{itemType}}{%- endif %}{%- if itemType == "journalArticle" %}  
&gt; **Journal**:: *{{publicationTitle}}* {%- endif %}{%- if volume %}  
&gt; **Volume**:: {{volume}} {%- endif %}{%- if issue %}  
&gt; **Issue**:: {{issue}} {%- endif %}{%- if itemType == "bookSection" %}  
&gt; **Book**:: {{publicationTitle}} {%- endif %}{%- if publisher %}  
&gt; **Publisher**:: {{publisher}} {%- endif %}{%- if place %}  
&gt; **Location**:: {{place}} {%- endif %}{%- if pages %}   
&gt; **Pages**:: {{pages}} {%- endif %}{%- if DOI %}  
&gt; **DOI**:: {{DOI}} {%- endif %}{%- if ISBN %}  
&gt; **ISBN**:: {{ISBN}} {%- endif %}    


</code></pre></div></div> <p>To add the CSS snippet, go to … Here is the updated CSS snippet:</p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* Yellow */</span>
<span class="nc">.literature-note</span> <span class="nc">.callout</span><span class="o">[</span><span class="nt">data-callout-metadata</span><span class="o">=</span><span class="s1">"#ffd400"</span><span class="o">]</span> <span class="p">{</span>
  <span class="py">--callout-color</span><span class="p">:</span> <span class="m">255</span><span class="p">,</span> <span class="m">204</span><span class="p">,</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* Red */</span>
<span class="nc">.literature-note</span> <span class="nc">.callout</span><span class="o">[</span><span class="nt">data-callout-metadata</span><span class="o">=</span><span class="s1">"#ff6666"</span><span class="o">]</span> <span class="p">{</span>
  <span class="py">--callout-color</span><span class="p">:</span> <span class="m">255</span><span class="p">,</span> <span class="m">59</span><span class="p">,</span> <span class="m">48</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* Orange */</span>
<span class="nc">.literature-note</span> <span class="nc">.callout</span><span class="o">[</span><span class="nt">data-callout-metadata</span><span class="o">=</span><span class="s1">"#f19837"</span><span class="o">]</span> <span class="p">{</span>
  <span class="py">--callout-color</span><span class="p">:</span> <span class="m">255</span><span class="p">,</span> <span class="m">149</span><span class="p">,</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* Green */</span>
<span class="nc">.literature-note</span> <span class="nc">.callout</span><span class="o">[</span><span class="nt">data-callout-metadata</span><span class="o">=</span><span class="s1">"#5fb236"</span><span class="o">]</span> <span class="p">{</span>
  <span class="py">--callout-color</span><span class="p">:</span> <span class="m">40</span><span class="p">,</span> <span class="m">205</span><span class="p">,</span> <span class="m">65</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* Blue */</span>
<span class="nc">.literature-note</span> <span class="nc">.callout</span><span class="o">[</span><span class="nt">data-callout-metadata</span><span class="o">=</span><span class="s1">"#2ea8e5"</span><span class="o">]</span> <span class="p">{</span>
  <span class="py">--callout-color</span><span class="p">:</span> <span class="m">0</span><span class="p">,</span> <span class="m">122</span><span class="p">,</span> <span class="m">255</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* Purple */</span>
<span class="nc">.literature-note</span> <span class="nc">.callout</span><span class="o">[</span><span class="nt">data-callout-metadata</span><span class="o">=</span><span class="s1">"#a28ae5"</span><span class="o">]</span> <span class="p">{</span>
  <span class="py">--callout-color</span><span class="p">:</span> <span class="m">125</span><span class="p">,</span> <span class="m">84</span><span class="p">,</span> <span class="m">222</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* Magenta */</span>
<span class="nc">.literature-note</span> <span class="nc">.callout</span><span class="o">[</span><span class="nt">data-callout-metadata</span><span class="o">=</span><span class="s1">"#e56eee"</span><span class="o">]</span> <span class="p">{</span>
  <span class="py">--callout-color</span><span class="p">:</span> <span class="m">255</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">255</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* Gray */</span>
<span class="nc">.literature-note</span> <span class="nc">.callout</span><span class="o">[</span><span class="nt">data-callout-metadata</span><span class="o">=</span><span class="s1">"#aaaaaa"</span><span class="o">]</span> <span class="p">{</span>
  <span class="py">--callout-color</span><span class="p">:</span> <span class="m">50</span><span class="p">,</span> <span class="m">50</span><span class="p">,</span> <span class="m">50</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="workflow">Workflow</h2> <h3 id="export-annotation-to-note">Export annotation to note</h3> <p>After you made highlights and comments, export them to a note using xx. You can further format the color and text (see <a href="https://www.zotero.org/support/note_templates">note templates documentation</a>). However, I will skip this and just use formatting in the Zotero Integration template.</p> <h3 id="import-notes-into-obsidian">Import notes into Obsidian</h3> <p>Open command pallett:</p> <p>Alternative, create a hotkey for that command.</p> <p>In the pop-up box, type in the author to search for literature. Once found, hit <code class="language-plaintext highlighter-rouge">enter</code>. It will automatically generate a markdown note using the zotero template.</p> <p>Here is a screenshot shows the final markdown file in Obsidian.</p> <p>You can create internal links in the created file to generate a mind-map.</p> <h3 id="create-table-using-dataview">Create table using Dataview</h3> <h2 id="references">References</h2> <ul> <li>https://forum.obsidian.md/t/zotero-integration-import-templates/36310</li> <li>https://forum.obsidian.md/t/zotero-zotfile-mdnotes-obsidian-dataview-workflow/15536</li> <li>https://medium.com/@alexandraphelan/an-updated-academic-workflow-zotero-obsidian-cffef080addd</li> </ul>]]></content><author><name></name></author><category term="tutorial"/><category term="Zotero"/><category term="Obsidian"/><category term="Workflow"/><category term="note-taking"/><summary type="html"><![CDATA[A workflow on how to export notes from Zotero to Obsidian]]></summary></entry><entry><title type="html">Create Your Personal Website using GitHub Pages</title><link href="https://hydroaggie.github.io/blog/2023/Create-Your-Personal-Website-Using-Github-Pages/" rel="alternate" type="text/html" title="Create Your Personal Website using GitHub Pages"/><published>2023-09-08T00:00:00+00:00</published><updated>2023-09-08T00:00:00+00:00</updated><id>https://hydroaggie.github.io/blog/2023/Create-Your-Personal-Website-Using-Github-Pages</id><content type="html" xml:base="https://hydroaggie.github.io/blog/2023/Create-Your-Personal-Website-Using-Github-Pages/"><![CDATA[<p>This tutorial shows simple steps you need to take to set up your personal website using <a href="https://pages.github.com/">GitHub Pages</a> and <a href="https://jekyllrb.com/">Jekyll</a> templates. It is completely free! You can also find <a href="https://pages.github.com/">official document page</a>, YouTube <a href="https://www.youtube.com/watch?v=QyFcl_Fba-k">tutorials</a>, and <a href="https://jayrobwilliams.com/posts/2020/06/academic-website/">blogs</a> online.</p> <h2 id="pre-requisites">Pre-requisites</h2> <ul> <li>GitHub account. Before we start, make sure you have a <a href="https://github.com/">GitHub</a> account.</li> <li>Docker. Install Docker locally on your computer. This will be used to run Docker images.</li> </ul> <h2 id="find-a-template">Find a template</h2> <p>To avoid building from scratch, start with a template. There are many templates on Github. Here are a few that focus on academia. We will use al-folio as an example in this blog.</p> <ul> <li><a href="https://github.com/alshedivat/al-folio">al-folio</a>: A Jekyll theme website for academics. You can use it to build both personal and group/lab pages. There are many examples listed in the Readme. I personally used it to create my <a href="https://hydroaggie.github.io/">group website</a>. There is a cool <a href="https://www.youtube.com/watch?v=g6AJ9qPPoyc">video</a> on how to setup.</li> <li><a href="https://github.com/academicpages/academicpages.github.io">academicpages</a>: Another template for academic websites. It provides detailed instructions on its readme. Also see this <a href="https://jayrobwilliams.com/posts/2020/06/academic-website/">blog</a> as an example.</li> </ul> <h2 id="installation">Installation</h2> <ul> <li>Go to <code class="language-plaintext highlighter-rouge">https://github.com/alshedivat/al-folio</code>, click the green button <code class="language-plaintext highlighter-rouge">Use this template</code> and select <code class="language-plaintext highlighter-rouge">Create a new repository</code>. Follow the instructions to create a new repo. <strong>Remember to use <code class="language-plaintext highlighter-rouge">your_github_name/your_github_name.github.io</code> as the new repository name</strong>. This will allow GitHub Page to work.</li> <li>Go to the newly created repo <code class="language-plaintext highlighter-rouge">your_github_name/your_github_name.github.io</code>, click <code class="language-plaintext highlighter-rouge">Code</code> and clone the repo. You can also choose to open with GitHub Desktop. Here is a command line example. <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/your_github_name/your_github_name.github.io.git
<span class="nb">cd </span>your_github_name.github.io
</code></pre></div> </div> </li> <li>Local setup using Docker (<strong>Recommended</strong>). Follow the instructions <a href="https://github.com/alshedivat/al-folio#local-setup-using-docker-recommended">here</a>. Alternatively, you can <a href="https://github.com/alshedivat/al-folio#local-setup-legacy">set up locally</a> by installing several packages (this may be challenging for new users).</li> <li>Once the local setup is successful, you will see a prompt with the local server address on screen. <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Auto-regeneration: enabled <span class="k">for</span> <span class="s1">'Path/to/your_github_name.github.io'</span>
  Server address: http://127.0.0.1:4000
</code></pre></div> </div> </li> <li>Open a browser with the server address (e.g., <code class="language-plaintext highlighter-rouge">http://127.0.0.1:4000</code>). You will see the same template as shown <a href="https://alshedivat.github.io/al-folio/">here</a>.</li> </ul> <h2 id="deploy-to-github">Deploy to GitHub</h2> <p>Now we will make some changes and deploy your website using Github Pages.</p> <ul> <li>Open <code class="language-plaintext highlighter-rouge">_config.yml</code> file in the repo, set <code class="language-plaintext highlighter-rouge">url</code> to <code class="language-plaintext highlighter-rouge">https://your_github_name.github.io</code> and leave <code class="language-plaintext highlighter-rouge">baseurl</code> empty.</li> <li>Enable automatic deployment of your website. Basically, this will allow you to update your website automatically whenever you push any changes to your repo. <ul> <li>Go to <code class="language-plaintext highlighter-rouge">https://github.com/your_github_name/your_github_name.github.io</code>. Go to <code class="language-plaintext highlighter-rouge">Settings --&gt; Actions --&gt; General --&gt; Action permissions --&gt; Allow all actions and reusable workflows</code>. Go to <code class="language-plaintext highlighter-rouge">Settings --&gt; Actions --&gt; General --&gt; Workflow permissions --&gt; Read and write permissions</code>. Click Save at the bottom.</li> </ul> </li> <li>Make any changes to your repo. You can change your name and other details in <code class="language-plaintext highlighter-rouge">_config.yml</code> file. Commit and push your changes. This will trigger the deploy action. <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add _config.yml
git commit <span class="nt">-m</span> <span class="s2">"update name"</span>
git push
</code></pre></div> </div> </li> <li>Now your repo should have a newly built branch named <code class="language-plaintext highlighter-rouge">gh-pages</code>. Go to <code class="language-plaintext highlighter-rouge">Settings --&gt; Pages --&gt; Build and deployment</code>, change <code class="language-plaintext highlighter-rouge">Source --&gt; Deploy from a branch</code>, <code class="language-plaintext highlighter-rouge">Branch --&gt; gh-pages</code> (<strong>Important</strong>).</li> <li>You should be able to see your website live at <code class="language-plaintext highlighter-rouge">https://your_github_name.github.io</code>.</li> </ul> <h2 id="sync-with-upstream-template">Sync with upstream template</h2> <p>If you would like to keep updated with the upstream template, you can do so by creating a new workflow.</p> <ul> <li>Go to <code class="language-plaintext highlighter-rouge">Settings -&gt; Actions -&gt; General -&gt; Workflow permissions</code>, check <code class="language-plaintext highlighter-rouge">Allow GitHub Actions to create and approve pull requests</code> and save your changes.</li> <li>Navigate to <code class="language-plaintext highlighter-rouge">your_github_name.github.io/.github/workflows</code>. Create a <code class="language-plaintext highlighter-rouge">sync.yml</code> file with the following content:</li> </ul> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Sync from template</span>
<span class="na">on</span><span class="pi">:</span>
    <span class="c1"># cronjob trigger</span>
  <span class="na">schedule</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span>  <span class="s2">"</span><span class="s">0</span><span class="nv"> </span><span class="s">0</span><span class="nv"> </span><span class="s">1</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*"</span>
  <span class="c1"># manual trigger</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">repo-sync</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="c1"># To use this repository's private action, you must check out the repository</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">actions-template-sync</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">AndreasAugustin/actions-template-sync@v0.7.3</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">github_token</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">source_repo_path</span><span class="pi">:</span> <span class="s">alshedivat/al-folio</span>
          <span class="na">upstream_branch</span><span class="pi">:</span> <span class="s">master</span>
</code></pre></div></div> <ul> <li>Save and commit the changes.</li> <li>Alternatively you can manually merge the remote repo:</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Assuming the current directory is &lt;your-repo-name&gt;</span>
<span class="nv">$ </span>git remote add upstream https://github.com/alshedivat/al-folio.git
<span class="nv">$ </span>git fetch upstream
<span class="nv">$ </span>git rebase v0.9.0
</code></pre></div></div>]]></content><author><name></name></author><category term="geek"/><category term="GitHub"/><category term="Jekyll"/><category term="website"/><summary type="html"><![CDATA[A tutorial on how to create a personal website]]></summary></entry><entry><title type="html">Install ATS on CHPC</title><link href="https://hydroaggie.github.io/blog/2023/Compile-ATS-on-CHPC/" rel="alternate" type="text/html" title="Install ATS on CHPC"/><published>2023-08-04T00:00:00+00:00</published><updated>2023-08-04T00:00:00+00:00</updated><id>https://hydroaggie.github.io/blog/2023/Compile-ATS-on-CHPC</id><content type="html" xml:base="https://hydroaggie.github.io/blog/2023/Compile-ATS-on-CHPC/"><![CDATA[<p>This provides guidance on how to install ATS on UoU CHPC system. It mostly follows post <a href="/blog/2021/Compile-ATS-Master-on-Linux">Install ATS on Linux</a> with a few modifications.</p> <h2 id="load-modules">Load modules</h2> <ul> <li>Load compilers and cmake? <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module load gcc/11.2.0 openmpi/4.1.4 cmake/3.26.0
</code></pre></div> </div> </li> <li>check if <code class="language-plaintext highlighter-rouge">cmake</code> exists <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>which cmake
</code></pre></div> </div> </li> <li>Get <code class="language-plaintext highlighter-rouge">OPENMPI_DIR</code>. The root directory can be found by the following command. <strong>Do not include <code class="language-plaintext highlighter-rouge">bin/mpicc</code></strong></li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># get the root directory of mpi</span>
which mpicc 

<span class="c"># e.g.</span>
/uufs/chpc.utah.edu/sys/spack/v019/linux-rocky8-x86_64/gcc-11.2.0/openmpi-4.1.4-fvjpa3zslc4266fazcxbv6ntjgojf6rx/bin/mpic
</code></pre></div></div> <h2 id="installation">Installation</h2> <p>The steps follow <a href="/blog/2021/Compile-ATS-Master-on-Linux">Install ATS on Linux</a> .</p> <h2 id="modulefile">Modulefile</h2> <p>Creating a module file is useful for managing different versions of ats on HPC. The instructions follow this <a href="https://hpc.ncsu.edu/Documents/user_modules.php">post</a></p> <ul> <li>Create a modulefile</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> ATS_ROOT/modulefiles
<span class="c"># It is recommended to create different modulefiles for different compilers, arch, and ats versions</span>
<span class="c"># e.g.,</span>
<span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> ATS_ROOT/modulefiles/ats/tpls-0.98.6+amanzi-ats-master/chpc-notchpeak/gcc-11.2.0-openmpi-4.1.4

<span class="c"># create a textfile (can be any names. e.g., ats_v1.5)</span>
<span class="nv">$ </span>vi v1.5-dev_e8cad556
<span class="c"># inside the file, put the following environment information. Make sure the file starts with `#%Module`</span>
</code></pre></div></div> <ul> <li>Modulefile template</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#%Module1.0#####################################################################</span>
<span class="c">##</span>
<span class="c">## modules modulefile</span>
<span class="c">##</span>
<span class="c"># provide a helper to describe the module</span>
proc ModulesHelp <span class="o">{</span> <span class="o">}</span> <span class="o">{</span>
    global mpi_bin

    puts stderr <span class="s2">"</span><span class="se">\t</span><span class="s2">ATS ats/tpls-0.98.6+amanzi-ats-master/chpc-notchpeak/gcc-11.2.0-openmpi-4.1.4/opt repository, opt build"</span>
    puts stderr <span class="s2">""</span>
<span class="o">}</span>

module-whatis   <span class="s2">"ATS ats/tpls-0.98.6+amanzi-ats-master/chpc-notchpeak/gcc-11.2.0-openmpi-4.1.4/opt opt build"</span>
<span class="c"># #############################################################################</span>

<span class="c">## load modules during compilation</span>
module load gcc/11.2.0
module load openmpi/4.1.4
module load cmake/3.26.0

<span class="c">## set environment variables</span>
setenv MPI_DIR /uufs/chpc.utah.edu/sys/spack/v019/linux-rocky8-x86_64/gcc-11.2.0/openmpi-4.1.4-fvjpa3zslc4266fazcxbv6ntjgojf6rx

setenv AMANZI_TPLS_DIR /uufs/chpc.utah.edu/common/home/u6046326/github/ats-amanzi-Jul2023/amanzi_tpls-install-master-Release

setenv AMANZI_TPLS_BUILD_DIR /uufs/chpc.utah.edu/common/home/u6046326/github/ats-amanzi-Jul2023/amanzi_tpls-build-master-Release

setenv AMANZI_TPLS_BUILD_TYPE opt
setenv AMANZI_TRILINOS_BUILD_TYPE opt
setenv AMANZI_BUILD_TYPE opt
<span class="c">## (IMPORTANT!) set PATH and PYTHONPATH so the system can find ats</span>
prepend-path    PATH            /uufs/chpc.utah.edu/common/home/u6046326/github/ats-amanzi-Jul2023/amanzi_tpls-install-master-Release/bin
prepend-path    PATH            /uufs/chpc.utah.edu/common/home/u6046326/github/ats-amanzi-Jul2023/amanzi-install-master-Release/bin

prepend-path    PYTHONPATH      /uufs/chpc.utah.edu/common/home/u6046326/github/ats-amanzi-Jul2023/amanzi_tpls-install-master-Release/SEACAS/lib
prepend-path    PYTHONPATH      /uufs/chpc.utah.edu/common/home/u6046326/github/ats-amanzi-Jul2023/repos/amanzi/tools/amanzi_xml
prepend-path    PYTHONPATH      /uufs/chpc.utah.edu/common/home/u6046326/github/ats-amanzi-Jul2023/repos/amanzi/src/physics/ats/tools/utils
prepend-path    PYTHONPATH      /uufs/chpc.utah.edu/common/home/u6046326/github/ats-amanzi-Jul2023/repos/amanzi/src/physics/ats/tools/meshing/meshing_ats
</code></pre></div></div> <ul> <li>Save the file. Put the following in <code class="language-plaintext highlighter-rouge">.bash_profile</code> or similar so the custom module is added when login. <strong>No slash after modulefiles!</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module use <span class="nt">-a</span> /uufs/chpc.utah.edu/common/home/u6046326/github/ats-amanzi-Jul2023/modulefiles
</code></pre></div> </div> </li> <li>Search for custom modules. The system will find all modules with name ‘ats’ in them. ```bash module avail ats <h1 id="or">or</h1> <p>module spider ats</p> </li> </ul> <h1 id="load-the-one-you-want">load the one you want</h1> <p>module load ats/tpls-0.98.6+amanzi-ats-master/chpc-notchpeak/gcc-11.2.0-openmpi-4.1.4/v1.5-dev_e8cad556</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Alternatively, enter `ml ats`, then hit `TAB`. It will list all available modules starting with `ats`
```bash
# load module
ml ats/tpls-0.98.6+amanzi-ats-master/chpc-notchpeak/gcc-11.2.0-openmpi-4.1.4/v1.5-dev_e8cad556
</code></pre></div></div>]]></content><author><name></name></author><category term="software"/><category term="HPC"/><category term="code"/><summary type="html"><![CDATA[Documentation on how to install ATS on CHPC system]]></summary></entry><entry><title type="html">Install ATS using Spack</title><link href="https://hydroaggie.github.io/blog/2023/Build-ATS-using-Spack/" rel="alternate" type="text/html" title="Install ATS using Spack"/><published>2023-08-03T00:00:00+00:00</published><updated>2023-08-03T00:00:00+00:00</updated><id>https://hydroaggie.github.io/blog/2023/Build-ATS-using-Spack</id><content type="html" xml:base="https://hydroaggie.github.io/blog/2023/Build-ATS-using-Spack/"><![CDATA[<p>The post shows the steps to build ATS using Spack on CHPC. It roughly follows the instructions <a href="https://github.com/amanzi/amanzi/blob/master/config/spack/README.md">here</a> and <a href="https://github.com/CHPC-UofU/spack-config/blob/master/readme-user.md">here</a>.</p> <h2 id="setting-up-user">Setting up User</h2> <ul> <li>Create spack directories</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$HOME</span>/spack/local

<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$HOME</span>/.spack

</code></pre></div></div> <ul> <li>Create <code class="language-plaintext highlighter-rouge">~/.spack/config.yaml</code></li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /uufs/chpc.utah.edu/sys/installdir/spack/0.20.1/etc/spack/config.yaml ~/.spack

<span class="c"># inside config.yaml, modify the root and template paths to the following:</span>
root: <span class="nv">$HOME</span>/spack/local/builds

template_dirs:
  - <span class="nv">$HOME</span>/spack/local/templates

</code></pre></div></div> <ul> <li>Create <code class="language-plaintext highlighter-rouge">~/.spack/modules.yaml</code></li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#inside modules.yaml, put the following:</span>
modules:
  default:
    roots:
      lmod: <span class="nv">$HOME</span>/spack/local/modules
</code></pre></div></div> <h2 id="build-spack">Build Spack</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># load spack</span>
<span class="c"># $ source /uufs/chpc.utah.edu/sys/installdir/spack/0.20.1/share/spack/setup-env.sh</span>

<span class="nv">$ </span>module load spack/0.20.1  

<span class="c"># setup compilers</span>
<span class="c"># $ spack compiler find</span>

<span class="c"># clone Amanzi</span>
<span class="c">#$ git clone --recursive https://github.com/amanzi/amanzi</span>
<span class="nv">$ </span>spack repo add PATH_TO_AMANZI/config/spack

<span class="c"># install Amanzi</span>
<span class="nv">$ </span>spack <span class="nb">install </span>amanzi%gcc@11.2.0~tests <span class="nv">physics</span><span class="o">=</span>ats ^openmpi@4.1.4%gcc@11.2.0 <span class="nv">fabrics</span><span class="o">=</span>ucx +cxx+internal-hwloc <span class="nv">schedulers</span><span class="o">=</span>slurm +legacylaunchers ^ucx +mlx5_dv+verbs+ud+dc+rc+cma ^trilinos@13.0.0 <span class="nv">target</span><span class="o">=</span>nehalem  
</code></pre></div></div> <p>Notes:</p> <ul> <li><code class="language-plaintext highlighter-rouge">Error: cannot load package 'crunchtope' from the 'amanzi' repository: version() got an unexpected keyword argument 'default'</code> <ul> <li>To fix this, use <code class="language-plaintext highlighter-rouge">spack edit crunchtope</code>, remove <code class="language-plaintext highlighter-rouge">default=True</code> from <code class="language-plaintext highlighter-rouge">version</code> keywords.</li> </ul> </li> </ul> <h2 id="load-modules">Load modules</h2> <p>Load the modules for the built programs.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># add the module file path</span>
module use <span class="nt">-a</span> /uufs/chpc.utah.edu/common/home/u6046326/spack/local/modules

<span class="c"># load the compiler environment first</span>
ml gcc/11.2.0  openmpi/4.1.4
<span class="c"># Then load the program</span>
ml linux-rocky8-x86_64/MPI/linux-rocky8-nehalem/gcc/11.2.0/openmpi/4.1.4/amanzi

</code></pre></div></div> <p>A sample of the modulefile (aka. <code class="language-plaintext highlighter-rouge">master.lua</code>) is shown below:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">--</span> -<span class="k">*</span>- lua -<span class="k">*</span>-
<span class="nt">--</span> Module file created by spack <span class="o">(</span>https://github.com/spack/spack<span class="o">)</span> on 2023-08-10 09:44:38.438489
<span class="nt">--</span>
<span class="nt">--</span> amanzi@master%gcc@11.2.0~geochemistry+hypre~ipo+shared~silo~tests <span class="nv">build_system</span><span class="o">=</span>cmake <span class="nv">build_type</span><span class="o">=</span>Release <span class="nv">data_model</span><span class="o">=</span>epetra <span class="nv">generator</span><span class="o">=</span>make <span class="nv">mesh_framework</span><span class="o">=</span>mstk <span class="nv">mesh_type</span><span class="o">=</span>unstructured <span class="nv">physics</span><span class="o">=</span>ats <span class="nb">arch</span><span class="o">=</span>linux-rocky8-nehalem/kfoqbao
<span class="nt">--</span>

whatis<span class="o">([[</span>Name : amanzi]]<span class="o">)</span>
whatis<span class="o">([[</span>Version : master]]<span class="o">)</span>
whatis<span class="o">([[</span>Target : nehalem]]<span class="o">)</span>
whatis<span class="o">([[</span>Short description : Amanzi, the Multi-Process HPC Simulator is a highly modular and extensible computational engine <span class="k">for </span>simulations of flow and reactive transport. It is capable of simulating transient saturated and variably saturated <span class="o">(</span>Richards<span class="o">)</span> flows, transport with non-grid-aligned dispersion and a variety of reactions. In the future it will include non-isothermal, multi-phase multi-component, geo-mechanical, and surface water models. To achive this ambitious goal we are building Amanzi as a grass-roots collaboration of an emerging broader community of geoscienists, computational and computer scientists, and applied mathematicians. This broader community is leveraging its extensive experience, existing capabilities, and untapped advances from their areas of expertise to develop Amanzi.]]<span class="o">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="software"/><category term="HPC"/><category term="code"/><summary type="html"><![CDATA[Documentation on how to install ATS using Spack on CHPC]]></summary></entry><entry><title type="html">Install PFLOTRAN on Mac M1</title><link href="https://hydroaggie.github.io/blog/2023/Install-PFLOTRAN-DFNWorks-Dakota-on-Mac-M1/" rel="alternate" type="text/html" title="Install PFLOTRAN on Mac M1"/><published>2023-07-12T00:00:00+00:00</published><updated>2023-07-12T00:00:00+00:00</updated><id>https://hydroaggie.github.io/blog/2023/Install-PFLOTRAN-DFNWorks-Dakota-on-Mac-M1</id><content type="html" xml:base="https://hydroaggie.github.io/blog/2023/Install-PFLOTRAN-DFNWorks-Dakota-on-Mac-M1/"><![CDATA[<p>A Guide to Building PFLOTRAN, DFNWorks, and Dakota on Apple Silicon Macs<br/> *This has been tested on an Apple MacBook Pro with M1 Max chip (2021) running MacOS Ventura 13.4</p> <h2 id="prerequisites">Prerequisites</h2> <ul> <li> <p>Install Xcode (14.3). Install Xcode command line tools (<code class="language-plaintext highlighter-rouge">xcode-select --install</code>)</p> </li> <li> <p>Install Anaconda3: https://www.anaconda.com/download#macos . <span style="color:red;"> Mamba is preferred.</span></p> </li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span>python numpy, h5py, scipy, matplotlib, seaborn, networkx

<span class="c"># or </span>
mamba create <span class="nt">-n</span> pflotran-short-course python numpy h5py scipy matplotlib seaborn networkx mplstereonet fpdf conda-build <span class="nt">-c</span> conda-forge
</code></pre></div></div> <ul> <li>Add the following to ~/.bash_profile</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/opt/homebrew/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>  
<span class="nb">export </span><span class="nv">PETSC_DIR</span><span class="o">==</span>/Users/username/path_to_top_level_petsc 
<span class="nb">export </span><span class="nv">PETSC_ARCH</span><span class="o">=</span>arch-darwin-c-opt  
<span class="nb">export </span><span class="nv">PFLOTRAN_DIR</span><span class="o">=</span>/Users/username/path_to_top_level_pflotran 
<span class="nb">export </span><span class="nv">dfnworks_PATH</span><span class="o">=</span>/Users/username/path_to_top_level_dfnworks 
<span class="nb">export </span><span class="nv">PFLOTRAN_EXE</span><span class="o">=</span>/Users/username/path_to_top_level_pflotran/src/pflotran/pflotran <span class="nb">export </span><span class="nv">LAGRIT_EXE</span><span class="o">=</span>/Users/username/path_to_top_level_LaGriT/build/lagrit 
<span class="nb">export </span><span class="nv">DFNGEN_EXE</span><span class="o">=</span>/Users/username/path_to_top_level_dfnworks/DFNGen/DFNGen 
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/Users/username/path_to_top_level_Dakota/software/dakota/bin:<span class="nv">$PATH</span>

</code></pre></div></div> <h2 id="build--pflotran">Build PFLOTRAN</h2> <ul> <li>Install gcc</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>gcc
</code></pre></div></div> <ul> <li>Set compilers: <code class="language-plaintext highlighter-rouge">cd /opt/homebrew/bin</code> and look for <code class="language-plaintext highlighter-rouge">gfortran, g++, gcc</code>.</li> <li><span style="color:red;"> IMPORTANT! Create symbolic links as needed</span>, e.g., <code class="language-plaintext highlighter-rouge">ln -s g++-13 g++</code> and <code class="language-plaintext highlighter-rouge">ln -s gcc-13 gcc</code>. This will avoid using <code class="language-plaintext highlighter-rouge">clang</code> instead, which may fail.</li> <li><code class="language-plaintext highlighter-rouge">export PATH="/opt/homebrew/bin:$PATH" </code></li> <li>Create or navigate to your software directory</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/software/  
git clone https://gitlab.com/petsc/petsc.git  
<span class="nb">cd </span>petsc  
git checkout v3.19.0  

./configure <span class="nt">--with-gfortran</span><span class="o">=</span>/opt/homebrew/bin/gfortran-13 <span class="nt">--with-cxx</span><span class="o">=</span>/opt/homebrew/bin/g++-13 <span class="nt">--with-cc</span><span class="o">=</span>/opt/homebrew/bin/gcc-13 <span class="nt">--CFLAGS</span><span class="o">=</span><span class="s1">'-O3'</span> <span class="nt">--CXXFLAGS</span><span class="o">=</span><span class="s1">'-O3'</span> <span class="nt">--FFLAGS</span><span class="o">=</span><span class="s1">'-O3'</span> <span class="nt">--with-debugging</span><span class="o">=</span>no <span class="nt">--download-openmpi</span><span class="o">=</span><span class="nb">yes</span> <span class="nt">--download-hdf5</span><span class="o">=</span><span class="nb">yes</span> <span class="nt">--download-hdf5-fortran-bindings</span><span class="o">=</span><span class="nb">yes</span> <span class="nt">--download-fblaslapack</span><span class="o">=</span><span class="nb">yes</span> <span class="nt">--download-metis</span><span class="o">=</span><span class="nb">yes</span> <span class="nt">--download-parmetis</span><span class="o">=</span><span class="nb">yes</span> <span class="nt">--download-hypre</span><span class="o">=</span><span class="nb">yes

export </span><span class="nv">PETSC_DIR</span><span class="o">=</span>/home/username/path_to_top_level_petsc
<span class="nb">export </span><span class="nv">PETSC_ARCH</span><span class="o">=</span>arch-darwin-c-opt  
</code></pre></div></div> <ul> <li>Follow on-screen instructions for building and testing your PETSc installation <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make all
</code></pre></div> </div> </li> <li>Potentially: in <code class="language-plaintext highlighter-rouge">~/&lt;path-to-top-level-petsc&gt;/arch-darwin-c-opt/lib/petsc/conf/petscvariables</code>, delete <code class="language-plaintext highlighter-rouge">--oversubscribe</code></li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># install PFLOTRAN</span>
<span class="nb">cd</span> ~/software/  
git clone https://bitbucket.org/pflotran/pflotran.git 
<span class="nb">cd </span>pflotran/src/pflotran  
make pflotran  
<span class="c"># compile using multiple cores (e.g., 4 cores)</span>
make <span class="nt">-j4</span> pflotran

<span class="c">#install conda-build to use conda develop. conda develop command is to install developmental version </span>
conda <span class="nb">install </span>conda-build
conda develop /Users/username/path_to_top_level_pflotran/src/python/
</code></pre></div></div> <h2 id="dfnworks">DFNWorks</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># install LaGriT</span>
<span class="nb">cd</span> ~/software/  
git clone https://github.com/lanl/LaGriT.git  
<span class="nb">cd </span>LaGriT/  
<span class="nb">mkdir </span>build/ <span class="o">&amp;&amp;</span> <span class="nb">cd </span>build/  
cmake .. <span class="o">&amp;&amp;</span> make  <span class="c"># make sure cmake is from homebrew/bin</span>

<span class="c"># Install DFNWorks</span>
<span class="nb">cd</span> ~/software/  
git clone https://github.com/lanl/dfnWorks.git  
<span class="nb">cd </span>dfnWorks/pydfnworks/bin  
git checkout aa02d61 
python fix_paths.py  
<span class="nb">cd</span> ../  
conda <span class="nb">install</span> <span class="nt">-c</span> conda-forge mplstereonet  
conda <span class="nb">install</span> <span class="nt">-c</span> conda-forge fpdf  
</code></pre></div></div> <ul> <li>Comment out <code class="language-plaintext highlighter-rouge">pyvtk</code> stuff in <code class="language-plaintext highlighter-rouge">pydfnworks/dfnGen/meshing/mesh_dfn_helper.py </code>. Perhaps you mean to comment out <code class="language-plaintext highlighter-rouge">import pyvtk</code>? <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python setup.py bdist_wheel  
<span class="nb">cd</span> ../DFNGen/  
make  
<span class="nb">cd</span> ../DFNTrans/  
make  
conda develop /Users/username/path_to_top_level_dfnworks/pydfnworks/
</code></pre></div> </div> <h2 id="dakota">Dakota</h2> </li> </ul> <ol> <li>Download Dakota (command line only): https://snl-dakota.github.io/docs/6.18.0/users/setupdakota.html#installation <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/software/  
<span class="nb">tar </span>xzvf /path/to/Dakota-release.platform.tar.gz 
<span class="nb">mv </span>dakota-release.platform dakota
conda develop /path/to/Dakota/share/dakota/Python
</code></pre></div> </div> </li> </ol> <h2 id="other-software">Other software</h2> <ul> <li>Paraview <ol> <li>Download Paraview: https://www.paraview.org/download/</li> </ol> </li> <li>HDFView <ol> <li>Download HDFView: https://www.hdfgroup.org/downloads/hdfview/</li> </ol> </li> </ul>]]></content><author><name></name></author><category term="software"/><category term="HPC"/><category term="code"/><summary type="html"><![CDATA[Documentation on how to install PFLOTRAN on MacBook M1]]></summary></entry><entry><title type="html">Run ATS with Singularity Container</title><link href="https://hydroaggie.github.io/blog/2022/Running-ATS-using-Singularity/" rel="alternate" type="text/html" title="Run ATS with Singularity Container"/><published>2022-11-09T00:00:00+00:00</published><updated>2022-11-09T00:00:00+00:00</updated><id>https://hydroaggie.github.io/blog/2022/Running-ATS-using-Singularity</id><content type="html" xml:base="https://hydroaggie.github.io/blog/2022/Running-ATS-using-Singularity/"><![CDATA[<p>Singularity is specifically suited for HPC environment as it does not require root permission. The image can access most files directly on HPC system. For a detailed comparions see <a href="https://blogs.oregonstate.edu/learningbydoing/2022/01/04/docker-and-singularity-containers-which-one-is-better/">here</a></p> <p>Here is the instructions on how to run ATS using the Singularity container. This example has only been tested on the CHPC clusters.</p> <h2 id="requirements">Requirements</h2> <ul> <li>Singularity (or Apptainer) installed on HPC</li> <li>Docker image is available on Dockerhub</li> </ul> <h2 id="pull-image-from-dockerhub">Pull image from Dockerhub</h2> <ul> <li>Find ATS image: <a href="https://hub.docker.com/r/metsi/ats/tags">metis/ats</a> and select the appropriate tag</li> <li>(Optional) Request an interactive node if the image is too big. Sometimes the HPC will kill the pulling process due to large memory consumption.</li> <li>Pull using singularity. This will create a file named “ats_master-latest.sif”</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># load module</span>
<span class="nv">$ </span>module load singularity

<span class="c"># pull image from dockerhub. If this failed on HPC, you may need to request an interactive node.</span>
<span class="nv">$ </span>singularity pull ats_master.sif docker://metsi/ats:master-latest
</code></pre></div></div> <h2 id="inspect-image">Inspect image</h2> <p>To run image using multiple cores, the mpich version inside the image has to be compatible to the one installed in the HPC system. In this case, mpich version is <code class="language-plaintext highlighter-rouge">3.3.2</code>.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># shell into the image</span>
singularity shell ats_master-latest.sif

<span class="c"># inside the image find the compiler and mpich version. E.g., mpich-3.3.2</span>
singularity&gt; /usr/bin/which mpirun
singularity&gt; mpirun <span class="nt">--version</span>
Singularity&gt; /usr/bin/which ats
Singularity&gt; /home/amanzi_user/install/bin/ats <span class="nt">--version</span>
</code></pre></div></div> <p>How to find out the gcc version?</p> <h2 id="run-image">Run image</h2> <p>Test the image on CHPC notchpeak clusters. In case the HPC does not have the exact version, check to see if the latest version is compatible (e.g., mpich/3.4.2)</p> <h3 id="execute-image">Execute image</h3> <p>The commands following the image will be executed.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># use meshconvert</span>
singularity <span class="nb">exec </span>ats_master-latest.sif meshconvert mesh.exo mesh_sim.exo

<span class="c"># use XML converter</span>
singularity <span class="nb">exec </span>ats_master-latest.sif python /home/amanzi_user/amanzi/src/physics/ats/tools/input_converters/xml-1.3-1.4.py input.xml <span class="nt">-o</span> output.xml

<span class="c"># use python script</span>
singularity <span class="nb">exec</span> <span class="nv">$SIF_ATS_1d5</span> python /home/amanzi_user/amanzi/src/physics/ats/tools/utils/rh_to_vp.py CC_met_data_2014-2018.h5 <span class="nt">-f</span> vp.h5
</code></pre></div></div> <h3 id="parallel-jobs">Parallel jobs</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># request an interactive job</span>
salloc <span class="nt">-N</span> 1 <span class="nt">-n</span> 16 <span class="nt">-A</span> notchpeak-shared-short <span class="nt">-p</span> notchpeak-shared-short <span class="nt">-t</span> 2:00:00

<span class="c"># load required modules</span>
ml singularity gcc/8.5.0 mpich/3.4.2

<span class="c"># launch jobs</span>
mpirun <span class="nt">-np</span> 2 singularity <span class="nb">exec </span>ats_master-latest.sif ats <span class="nt">--xml_file</span><span class="o">=</span>input.xml
</code></pre></div></div> <h2 id="caveats">Caveats</h2> <ul> <li>If using multiple nodes causes significant slowdown, this likely means that the image itself communicates over ethernet instead of infiniBand. This requires modification of the image to make it compatible on infiniband. See an example of modifying image <a href="https://github.com/CHPC-UofU/Singularity-meep-mpi">here</a>. See detailed comparison between Ethernet and Infiniband <a href="https://stackoverflow.com/questions/46933493/infiniband-explained">here</a>.</li> </ul>]]></content><author><name></name></author><category term="software"/><category term="HPC"/><category term="code"/><summary type="html"><![CDATA[Documentation on how to run ATS using Singularity on HPC]]></summary></entry><entry><title type="html">Create Customized RSS Feed for Any Website</title><link href="https://hydroaggie.github.io/blog/2022/Create-Customized-RSS-Feed-for-Any-Website/" rel="alternate" type="text/html" title="Create Customized RSS Feed for Any Website"/><published>2022-10-06T00:00:00+00:00</published><updated>2022-10-06T00:00:00+00:00</updated><id>https://hydroaggie.github.io/blog/2022/Create-Customized-RSS-Feed-for-Any-Website</id><content type="html" xml:base="https://hydroaggie.github.io/blog/2022/Create-Customized-RSS-Feed-for-Any-Website/"><![CDATA[<p>For tutorials (<a href="https://www.fivefilters.org/2021/how-to-turn-a-webpage-into-an-rss-feed/">part1</a> and <a href="https://www.fivefilters.org/2021/how-to-turn-a-webpage-into-an-rss-feed-pt2/">part2</a>) by fivefilters.</p> <ul> <li>Go to https://createfeed.fivefilters.org/</li> <li>Enter web page URL (e.g., https://www.nifa.usda.gov/grants/funding-opportunities)</li> <li>Get links inside the HTML elements with this id or class value <ul> <li>right click and selecct <code class="language-plaintext highlighter-rouge">inspect</code></li> <li>simple selectors. E.g., Use “post-title” as the class value for the above website</li> <li>Advanced selectors.</li> </ul> </li> <li>Click <code class="language-plaintext highlighter-rouge">Preview</code>. Make sure the results on the right look correct.</li> <li>Right click <code class="language-plaintext highlighter-rouge">RSS Feed</code> button, and copy <a href="https://createfeed.fivefilters.org/extract.php?url=https%3A%2F%2Fwww.nifa.usda.gov%2Fgrants%2Ffunding-opportunities&amp;in_id_or_class=post-title&amp;max=5&amp;order=document&amp;guid=0">link address</a>.</li> <li>Open RSS app (e.g., <a href="https://netnewswire.com/">NetNewsWire</a>). Subscribe using the copied link address.</li> <li>Now the RSS feed will appear in the app.</li> </ul>]]></content><author><name></name></author><category term="geek"/><category term="RSS"/><category term="website"/><summary type="html"><![CDATA[Documentation on how to create customized RSS feed]]></summary></entry><entry><title type="html">A Tutorial on How to Create a Jupyter Book</title><link href="https://hydroaggie.github.io/blog/2022/Create-Jupyter-Book/" rel="alternate" type="text/html" title="A Tutorial on How to Create a Jupyter Book"/><published>2022-06-15T00:00:00+00:00</published><updated>2022-06-15T00:00:00+00:00</updated><id>https://hydroaggie.github.io/blog/2022/Create-Jupyter-Book</id><content type="html" xml:base="https://hydroaggie.github.io/blog/2022/Create-Jupyter-Book/"><![CDATA[<p>Jupyter Book is used to build an open source, interactive book using Jupyter Notebooks and Markdowns. The best thing is that it can be easily hosted using Github Page so that people can always access the latest version of the book.</p> <h2 id="pre-requisite">Pre-requisite:</h2> <ul> <li>Github account</li> <li>Git, Python <h2 id="install-jupyter-book">Install Jupyter Book</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># create virtual env</span>
conda create <span class="nt">-n</span> jupyterbook <span class="nt">-c</span> conda-forge jupyter-book
conda activate jupyterbook
</code></pre></div> </div> </li> </ul> <h2 id="start-with-a-template">Start with a template</h2> <ul> <li>From the official website:</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jb create mybook
</code></pre></div></div> <p>This will create a folder with some template files. The two most important ones are <code class="language-plaintext highlighter-rouge">_toc.yml</code> and <code class="language-plaintext highlighter-rouge">_config.yml</code>.</p> <ul> <li>Using <a href="https://github.com/executablebooks/cookiecutter-jupyter-book">Jupyter Book cookie-cutter</a>. This will include Github Actions that can be used to automatically deploy the book.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jupyter-book create <span class="nt">--cookiecutter</span> mybookpath/
</code></pre></div></div> <h3 id="create-table-of-content">Create table of content</h3> <p>The format should look something like below:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># In _toc.yml</span>
format: jb-book
root: intro <span class="c"># this is the intro.md file which will be placed at the root directory of the book</span>
chapters:
- file: markdown <span class="c"># a markdown.md file</span>
- file: notebooks <span class="c"># Jupyter notebooks</span>
</code></pre></div></div> <p>Note the file path is relative to the root file (e.g., <code class="language-plaintext highlighter-rouge">intro.md</code>)</p> <h3 id="configuaration">configuaration</h3> <p>Edit the <code class="language-plaintext highlighter-rouge">_config.yml</code> file to change the book title, add logo, and a few buttons.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># In _config.yml</span>
title: My sample book
author: The Jupyter Book Community
logo: logo.png
execute:
  execute_notebooks: force <span class="c"># other options include `automatic`, `off`</span>

<span class="c"># Add a bibtex file so that we can create citations</span>
bibtex_bibfiles:
  - references.bib

</code></pre></div></div> <h2 id="build-the-book">Build the book</h2> <p>Once you have added all the contents, you can build the book using</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># navigate into src/ folder</span>
<span class="nb">cd </span>src/ <span class="c"># or any folder that contains _config.yml</span>
<span class="c"># build the book</span>
jb build <span class="nb">.</span>
</code></pre></div></div> <p>This will generate many HTML files which you can preview at <code class="language-plaintext highlighter-rouge">file://Users/my_path_to_book/_build/index.html</code>. You can continue to add contents and re-build the book.</p> <h2 id="publish-the-book">Publish the book</h2> <ul> <li>Create a Github repository for the book</li> <li>Initialize the local book with git and push it to Github</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>path/to/book
git init
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"initialize the repo"</span>
git remote add origin https://github.com/pinshuai/ats-workflow.git

git push <span class="nt">-u</span> origin main
</code></pre></div></div> <ul> <li>Publish it online using GitHub Pages</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># install ghp-import by copying all the book contents to a branch called `gh-pages`</span>
pip <span class="nb">install </span>ghp-import

<span class="c"># build the book </span>
ghp-import <span class="nt">-n</span> <span class="nt">-p</span> <span class="nt">-f</span> ./_build/html
</code></pre></div></div> <p>Now the book should be live at <code class="language-plaintext highlighter-rouge">https://&lt;user&gt;.github.io/&lt;myonlinebook&gt;/</code></p> <h2 id="update-the-book">Update the book</h2> <p>Just add or modify the contents, rebuild the book and push it to Github.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># cd into src dir where the _toc.yml is</span>
<span class="nb">cd </span>mybook/src
jb build <span class="nb">.</span>
ghp-import <span class="nt">-n</span> <span class="nt">-p</span> <span class="nt">-f</span> ./_build/html
</code></pre></div></div> <h2 id="use-github-actions">Use Github Actions</h2> <p>Github Actions automates the process of building JupyterBook. So everytime when you make any changese to the book, it will be built automatically and published online!</p> <ul> <li>Add workflow. Create a folder named <code class="language-plaintext highlighter-rouge">.github/workflows</code></li> <li>Add a YAML file (e.g., <code class="language-plaintext highlighter-rouge">deploy.yml</code>) and add the following template</li> </ul> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">deploy-book</span>

<span class="c1"># Only run this when the master branch changes</span>
<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">main</span>
    <span class="c1"># If your git repository has the Jupyter Book within some-subfolder next to</span>
    <span class="c1"># unrelated files, you can make this run only if a file within that specific</span>
    <span class="c1"># folder has been modified.</span>
    <span class="c1">#</span>
    <span class="c1"># paths:</span>
    <span class="c1"># - some-subfolder/**</span>

<span class="c1"># This job installs dependencies, builds the book, and pushes it to `gh-pages`</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy-book</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>

    <span class="c1"># Install dependencies</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set up Python </span><span class="m">3.8</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-python@v2</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">python-version</span><span class="pi">:</span> <span class="m">3.8</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">pip install -r requirements.txt</span>
    <span class="c1"># Build the book. src is the a subfolder under root. </span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build the book</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">jupyter-book build src </span>
    <span class="c1"># Push the book's HTML to github-pages</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">GitHub Pages action</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">peaceiris/actions-gh-pages@v3.6.1</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">github_token</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">publish_dir</span><span class="pi">:</span> <span class="s">src/_build/html</span>
</code></pre></div></div> <p>Note:</p> <ul> <li>the branch name should be the same as the one used by the repository (e.g., <code class="language-plaintext highlighter-rouge">main</code> not <code class="language-plaintext highlighter-rouge">master</code> in this case)</li> <li>The only things that need to be modified is the build command and <code class="language-plaintext highlighter-rouge">publish_dir</code>. The dir is relative to the root dir under main branch. So if your book content is at the root dir, use the following instead:</li> </ul> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">jupyter-book build .</span>

<span class="na">publish_dir</span><span class="pi">:</span> <span class="s">./_build/html</span>
</code></pre></div></div> <h2 id="helpful-tutorials">Helpful tutorials:</h2> <ul> <li>https://ubc-dsci.github.io/jupyterdays/sessions/beuzen/jupyter_book_tutorial.html</li> <li>https://github.com/pabloinsente/jupyter-book-tutorial</li> </ul>]]></content><author><name></name></author><category term="geek"/><category term="Jupyter"/><category term="website"/><summary type="html"><![CDATA[A tutorial on how to create a Jupyter Book]]></summary></entry><entry><title type="html">Create A Documentation Website using MkDocs</title><link href="https://hydroaggie.github.io/blog/2022/Create-Documentation-Website/" rel="alternate" type="text/html" title="Create A Documentation Website using MkDocs"/><published>2022-05-05T00:00:00+00:00</published><updated>2022-05-05T00:00:00+00:00</updated><id>https://hydroaggie.github.io/blog/2022/Create-Documentation-Website</id><content type="html" xml:base="https://hydroaggie.github.io/blog/2022/Create-Documentation-Website/"><![CDATA[<p>After a python package is published, it is important to create documentation and publish it online. In this post, I will share how to create documentation using <a href="https://www.mkdocs.org/">MkDocs</a> and publish it on <a href="https://pages.github.com/">Github Pages</a>. You may also want to checkout <a href="https://towardsdatascience.com/creating-software-documentation-in-under-10-minutes-with-mkdocs-b11f52f0fb10">this article</a>.</p> <h2 id="requirement">Requirement</h2> <ul> <li>A Github repo for the python package</li> <li>python packages: pip, mkdocs, mkdocs-material</li> <li>Optional plugins: mkdocstrings, mkdocs-git-revision-date-plugin, mkdocs-jupyter</li> </ul> <h2 id="install-mkdocs-and-plugins">Install MkDocs and plugins</h2> <ul> <li>Use pip to install: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>mkdocs
pip <span class="nb">install </span>mkdocs-material
<span class="c"># plugins are optional </span>
pip <span class="nb">install </span>mkdocstrings
pip <span class="nb">install </span>mkdocs-git-revision-date-plugin
pip <span class="nb">install </span>mkdocs-jupyter
</code></pre></div> </div> </li> <li>Initialize project</li> </ul> <p>If you have cloned the github repo for the python package and the <code class="language-plaintext highlighter-rouge">mkdocs.yaml</code> exists, then do</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># the PROJECT_NAME is usually the repo name on Github</span>
<span class="nb">cd </span>PROJECT_NAME
</code></pre></div></div> <p>Otherwise, do</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdocs new PROJECT_NAME
</code></pre></div></div> <p>This will create a <code class="language-plaintext highlighter-rouge">mkdocs.yml</code> file and a folder named <code class="language-plaintext highlighter-rouge">/docs</code>. There is a single file named <code class="language-plaintext highlighter-rouge">index.md</code> within the folder.</p> <p>The format of the <code class="language-plaintext highlighter-rouge">mkdocs.yml</code> is as follows:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">site_name</span><span class="pi">:</span> <span class="s">NAME</span>
<span class="na">nav</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">Home</span><span class="pi">:</span> <span class="s">index.md</span>
  <span class="pi">-</span> <span class="na">Page2</span><span class="pi">:</span> <span class="s">page2.md</span>
  <span class="pi">-</span> <span class="na">Section1</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">Subpage1</span><span class="pi">:</span> <span class="s">subpage1.md</span>
    <span class="pi">-</span> <span class="na">Subpage2</span><span class="pi">:</span> <span class="s">subpage2.md</span>
<span class="na">theme</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">THEME_DOWNLOADED</span>
</code></pre></div></div> <p>The directory of the <code class="language-plaintext highlighter-rouge">/docs</code> looks like this:</p> <div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PROJECT_NAME/
    docs/
        <span class="nb">index</span><span class="p">.</span>md
        about<span class="p">.</span>md
        games/
             ping<span class="p">.</span>md
             balloon<span class="p">.</span>md
        rides/
             scary<span class="p">.</span>md
             <span class="k">drop</span><span class="p">.</span>md
    mkdocs<span class="p">.</span>yaml
</code></pre></div></div> <h2 id="deploy-the-website">Deploy the website</h2> <p>Run the following to generate a branch called “gh-pages” in your repo on Github:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mkdocs gh-deploy
</code></pre></div></div> <p>It should autimatically create the website on <code class="language-plaintext highlighter-rouge">USERNAME.github.io/PROJECT_NAME</code>. Make sure the source of the GitHub Pages under Settings is pointed to <code class="language-plaintext highlighter-rouge">gh-pages</code> branch and <code class="language-plaintext highlighter-rouge">/(root)</code> folder.</p> <h2 id="update-documentation">Update documentation</h2> <ul> <li>Update mkdocs.yml. If Jupyter notebooks are included, make sure notebooks are updated under <code class="language-plaintext highlighter-rouge">docs/notebooks</code> and new notebooks directories are added to <code class="language-plaintext highlighter-rouge">mkdocs.yml</code>.</li> <li>Deploy</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mkdocs gh-deploy
</code></pre></div></div>]]></content><author><name></name></author><category term="geek"/><category term="website"/><category term="documentation"/><category term="MkDocs"/><summary type="html"><![CDATA[A tutorial on how to create documentation page using MkDocs and Github Pages]]></summary></entry><entry><title type="html">Publish A Python Package on Pypi</title><link href="https://hydroaggie.github.io/blog/2022/Publish-Python-Package-on-Pypi/" rel="alternate" type="text/html" title="Publish A Python Package on Pypi"/><published>2022-05-03T00:00:00+00:00</published><updated>2022-05-03T00:00:00+00:00</updated><id>https://hydroaggie.github.io/blog/2022/Publish-Python-Package-on-Pypi</id><content type="html" xml:base="https://hydroaggie.github.io/blog/2022/Publish-Python-Package-on-Pypi/"><![CDATA[<p>This post will show the process of creating a python package and publish it on Pypi. The steps mostly follows this <a href="https://www.youtube.com/watch?v=7FcX9uWDuIQ">Youtube</a> by <a href="https://github.com/giswqs">Qiusheng Wu</a>.</p> <p>Before you start, make sure you have created an account with Github and Pypi, and have installed Anaconda on your PC.</p> <h2 id="create-conda-environment-and-install-cookiecutter">Create conda environment and install Cookiecutter</h2> <p>In this example, we use <code class="language-plaintext highlighter-rouge">pypackage</code> as the environment name.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create --name pypackage python
conda activate pypackage
pip install cookiecutter
</code></pre></div></div> <h2 id="use-cookiecutter-to-generate-template-for-a-python-package">Use Cookiecutter to generate template for a python package</h2> <p>I will use the template provided by <a href="https://github.com/giswqs/pypackage">giswqs/pypackage</a> which is originally created by <a href="https://github.com/audreyfeldroy/cookiecutter-pypackage">audreyfeldroy/cookiecutter-pypackage</a>. The main differences is that the modified version used markdown instead of restructured text as documentation.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cookiecutter gh:giswqs/pypackage
</code></pre></div></div> <p>This is prompt up a few questions asking about Full name, email address, Github username, project name (i.e., package name), project description, Pypi username, version, and etc. Then a folder with the same project name will be created under current working directory.</p> <h2 id="push-to-github">Push to Github</h2> <h3 id="create-a-repo-on-github">Create a repo on Github</h3> <p>Create an empty repo on Github with the same project name. Do no create README file! Here we use <code class="language-plaintext highlighter-rouge">demo</code> as the repo/project name.</p> <h3 id="initialize-local-repository-with-git">Initialize local repository with Git</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
git add .
git commit -m "first commit"
git remote add origin https://github.com/pinshuai/demo.git
git push -u origin main
</code></pre></div></div> <p>Add your python scripts under <code class="language-plaintext highlighter-rouge">./demo/demo/</code> and commit. Those scripts will be published on Pypi.</p> <h2 id="upload-to-pypi">Upload to Pypi</h2> <p>First install some packages (e.g., <code class="language-plaintext highlighter-rouge">twine</code>) that will be used to push to Pypi.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install -r ./demo/requirements_dev.txt
</code></pre></div></div> <p>Create <code class="language-plaintext highlighter-rouge">dist</code> folder and create a tarball inside it.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python setup.py sdist
</code></pre></div></div> <p>Use <code class="language-plaintext highlighter-rouge">twine</code> to upload the tarball to Pypi. This will ask for the username and passward for Pypi.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>twine upload demo-0.0.1.tar.gz
</code></pre></div></div> <p>Now the package has been successfully upload to Pypi! Now users can install the package using <code class="language-plaintext highlighter-rouge">pip install demo</code>.</p> <h2 id="deploy-documentation-website-on-github-pages">Deploy documentation website on Github Pages</h2> <p>The python package template already contains the necessary files (e.g, <code class="language-plaintext highlighter-rouge">mkdocs.yaml</code>) to deploy your documentation website using <code class="language-plaintext highlighter-rouge">MkDocs</code> on Github Pages. You will also find <code class="language-plaintext highlighter-rouge">/docs</code> folders with markdown files which will be used for documentation.</p> <h3 id="setup-mkdocs">Setup MkDocs</h3> <p>First, we need to install <code class="language-plaintext highlighter-rouge">MkDocs</code> and some plugins as specified in the <code class="language-plaintext highlighter-rouge">mkdocs.yaml</code>.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>mkdocs
pip <span class="nb">install </span>mkdocs-material
<span class="c"># plugins are optional </span>
pip <span class="nb">install </span>mkdocstrings
pip <span class="nb">install </span>mkdocs-git-revision-date-plugin
pip <span class="nb">install </span>mkdocs-jupyter
</code></pre></div></div> <h3 id="deploy-the-website">Deploy the website</h3> <p>Simply run the following command under the repo. It should autimatically create the website on <code class="language-plaintext highlighter-rouge">pinshuai.github.io/demo</code>. Make sure the source of the GitHub Pages under Settings is pointed to <code class="language-plaintext highlighter-rouge">gh-pages</code> branch and <code class="language-plaintext highlighter-rouge">/(root)</code> folder.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mkdocs gh-deploy
</code></pre></div></div> <h2 id="update-package">Update package</h2> <p>To update the package after changes are made, follow the steps.</p> <ol> <li>Change the version number in <code class="language-plaintext highlighter-rouge">setup.py</code>. E.g., change version: 0.0.1 –&gt; 0.0.2</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi setup.py
<span class="c"># update version: x.y.z</span>
</code></pre></div></div> <ol> <li>Create a new tarball</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python setup.py sdist
</code></pre></div></div> <ol> <li>Upload the new created tarball to Pypi.</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>twine upload dist/demo-0.0.2.tar.gz
<span class="c"># follow the prompt to enter username and password for PyPI</span>
<span class="c"># Enter your username: pinshuai</span>
<span class="c"># Enter your password: xxxx</span>
</code></pre></div></div> <ol> <li> <p>Check the Pypi website to see the new updated package.</p> </li> <li> <p>To install a newer version of the package:</p> </li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># upgrade the existing one. This may not work well if there are multiple newer versions</span>
<span class="c"># also make sure to run the command outside of the package repo</span>
pip <span class="nb">install </span>demo <span class="nt">-U</span>

<span class="c"># install a specific version and overwrite the existing ones</span>
pip <span class="nb">install</span> <span class="nt">-Iv</span> <span class="nv">demo</span><span class="o">==</span>0.0.2
</code></pre></div></div> <h2 id="github-action">Github Action</h2> <h3 id="publish-docs">Publish docs</h3> <p>Use the following template to publish docs. For this to work, you will need to enable read and write permission for workflows (Github –&gt; Settings –&gt; Actions –&gt; General –&gt; Workflow permissions)</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">docs</span>
<span class="na">on</span><span class="pi">:</span>
    <span class="na">push</span><span class="pi">:</span>
        <span class="na">branches</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">main</span>
<span class="na">jobs</span><span class="pi">:</span>
    <span class="na">deploy</span><span class="pi">:</span>
        <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
        <span class="na">steps</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>
            <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-python@v2</span>
              <span class="na">with</span><span class="pi">:</span>
                  <span class="na">python-version</span><span class="pi">:</span> <span class="m">3.9</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
              <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
                  <span class="s">python -m pip install --upgrade pip</span>
                  <span class="s">pip install --user --no-cache-dir Cython</span>
                  <span class="s"># pip install --user -r requirements.txt</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">PKG-TEST</span>
              <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
                  <span class="s">python -m unittest discover tests/</span>
            <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> <span class="s">pip install -r requirements_docs.txt</span>
            <span class="pi">-</span> <span class="na">run</span><span class="pi">:</span> <span class="s">mkdocs gh-deploy --force</span> 
</code></pre></div></div> <h2 id="trouble-shooting">Trouble shooting</h2> <ol> <li>Pip could not find the latest version even though it is updated on Pypi website. <ul> <li>solution: update pip first using <code class="language-plaintext highlighter-rouge">pip install -U pip</code>, then install the package using <code class="language-plaintext highlighter-rouge">pip install -U PACKAGE_NAME</code> <h2 id="reference">Reference</h2> </li> </ul> </li> </ol> <ul> <li>My <code class="language-plaintext highlighter-rouge">modvis</code> python package: https://github.com/pinshuai/modvis</li> <li><code class="language-plaintext highlighter-rouge">Pypackage</code> by Qiusheng Wu: https://github.com/giswqs/pypackage</li> </ul>]]></content><author><name></name></author><category term="geek"/><category term="python"/><category term="package"/><summary type="html"><![CDATA[A tutorial on how to publish a python package on Pypi]]></summary></entry></feed>